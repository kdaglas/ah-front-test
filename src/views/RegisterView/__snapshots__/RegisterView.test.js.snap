// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test register matches snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RegisterView
    RegsiterAction={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Register
          Clicked={[Function]}
          HandleChange={[Function]}
          successOrError="has-danger"
        />,
        <t
          appId="367351517400934"
          callback={[Function]}
          cssClass="kep-login-facebook"
          fields="name,email,picture"
          size="metro"
          tag="button"
          textButton="Login with Facebook"
          typeButton="button"
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "Clicked": [Function],
          "HandleChange": [Function],
          "successOrError": "has-danger",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "appId": "367351517400934",
          "callback": [Function],
          "cssClass": "kep-login-facebook",
          "fields": "name,email,picture",
          "size": "metro",
          "tag": "button",
          "textButton": "Login with Facebook",
          "typeButton": "button",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Register
            Clicked={[Function]}
            HandleChange={[Function]}
            successOrError="has-danger"
          />,
          <t
            appId="367351517400934"
            callback={[Function]}
            cssClass="kep-login-facebook"
            fields="name,email,picture"
            size="metro"
            tag="button"
            textButton="Login with Facebook"
            typeButton="button"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "Clicked": [Function],
            "HandleChange": [Function],
            "successOrError": "has-danger",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "appId": "367351517400934",
            "callback": [Function],
            "cssClass": "kep-login-facebook",
            "fields": "name,email,picture",
            "size": "metro",
            "tag": "button",
            "textButton": "Login with Facebook",
            "typeButton": "button",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
